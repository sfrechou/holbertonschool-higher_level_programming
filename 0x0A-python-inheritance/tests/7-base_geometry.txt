The ``7-base_geometry`` module
======================

Using ``integer_validator``
-------------------
This is a doctest based on 7-base_geometry.py
Each '>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

Import function:
        >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test: Passing one string one int
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("name", 50)

Test: Passing two strings
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("name", "John")
        Traceback (most recent call last):
        ...
        TypeError: name must be an integer

Test: Passing two ints
        >>> bg = BaseGeometry()
        >>> bg.integer_validator(5, 10)

Test: Passing only one string
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("name")
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 1 required positional argument: 'value'

Test: Passing only one int
        >>> bg = BaseGeometry()
        >>> bg.integer_validator(20)
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 1 required positional argument: 'value'

Test: Passing one string and a negative float
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("20", -105.2)
        Traceback (most recent call last):
        ...
        TypeError: 20 must be an integer

Test: Passing one string and a negative int
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("20", -105)
        Traceback (most recent call last):
        ...
        ValueError: 20 must be greater than 0

Test: Passing one string and 0
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("20", 0)
        Traceback (most recent call last):
        ...
        ValueError: 20 must be greater than 0

Test: Passing one string and a big number
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("20", 1e100)
        Traceback (most recent call last):
        ...
        TypeError: 20 must be an integer

Test: Passing one string and a dict
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("Test", {3, 4})
        Traceback (most recent call last):
        ...
        TypeError: Test must be an integer

Test: Passing one string and inf
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("20", float('inf))
        Traceback (most recent call last):
        ...
        SyntaxError: EOL while scanning string literal

Test: Passing one string and a float
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("float", 100.5)
        Traceback (most recent call last):
        ...
        TypeError: float must be an integer

Test: Passing one string and a complex number
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("float", 5j)
        Traceback (most recent call last):
        ...
        TypeError: float must be an integer

Test: Passing one string and a boolean
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("float", False)
        Traceback (most recent call last):
        ...
        TypeError: float must be an integer

Test: Passing one string and a list
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("float", [0, 1, 2])
        Traceback (most recent call last):
        ...
        TypeError: float must be an integer

Test: Passing one string and None
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("20", None)
        Traceback (most recent call last):
        ...
        TypeError: 20 must be an integer

Test: Passing None, None
        >>> bg = BaseGeometry()
        >>> bg.integer_validator(None, None)
        Traceback (most recent call last):
        ...
        TypeError: None must be an integer

Test: Passing None
        >>> bg = BaseGeometry()
        >>> bg.integer_validator(None)
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 1 required positional argument: 'value'

Test: Passing no arguments
        >>> bg = BaseGeometry()
        >>> bg.integer_validator()
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
