The ``1-my_list`` module
======================

Using ``print_sorted``
-------------------
This is a doctest based on 1-my_list.py
Each '>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

Import function:
        >>> MyList = __import__('1-my_list').MyList

Test if my_list is instance of MyList:
        >>> my_list = MyList()
        >>> isinstance(my_list, MyList)
        True

Test if my_list is instance of list:
        >>> my_list = MyList()
        >>> isinstance(my_list, list)
        True

Test if my_list not instantiated:
        >>> my_list = [1, 10, 100]
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        AttributeError: 'list' object has no attribute 'print_sorted'

Test if my_list not instantiated:
        >>> my_list = MyList([1, 10, 100])
        >>> my_list.print_sorted()
        [1, 10, 100]


Test: list with positive ints
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.append(10)
        >>> my_list.append(100)
        >>> my_list.append(1000)
        >>> my_list.print_sorted()
        [1, 10, 100, 1000]

Test: list with negative ints
        >>> my_list = MyList()
        >>> my_list.append(-1)
        >>> my_list.append(-10)
        >>> my_list.append(-100)
        >>> my_list.append(-1000)
        >>> my_list.print_sorted()
        [-1000, -100, -10, -1]

Test: list with negative and positive ints
        >>> my_list = MyList()
        >>> my_list.append(-1)
        >>> my_list.append(10)
        >>> my_list.append(-100)
        >>> my_list.append(1000)
        >>> my_list.print_sorted()
        [-100, -1, 10, 1000]

Test: list with same ints
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.append(1)
        >>> my_list.append(1)
        >>> my_list.append(1)
        >>> my_list.print_sorted()
        [1, 1, 1, 1]

Test: list with only one int
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.print_sorted()
        [1]

Test: empty list
        >>> my_list = MyList()
        >>> my_list.print_sorted()
        []

Test: list with ints and string
        >>> my_list = MyList()
        >>> my_list.append(1)
        >>> my_list.append(2)
        >>> my_list.append(5)
        >>> my_list.append("four")
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        TypeError: unorderable types: str() < int()

Test: list with only strings
        >>> my_list = MyList()
        >>> my_list.append("one")
        >>> my_list.append("three")
        >>> my_list.append("seven")
        >>> my_list.append("four")
        >>> my_list.print_sorted()
        ['four', 'one', 'seven', 'three']

Test: list with two Nones
        >>> my_list = MyList()
        >>> my_list.append(None)
        >>> my_list.append(None)
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        TypeError: unorderable types: NoneType() < NoneType()

Test: list with one None
        >>> my_list = MyList()
        >>> my_list.append(None)
        >>> my_list.print_sorted()
        [None]

Test: list with floats and ints
        >>> my_list = MyList()
        >>> my_list.append(50)
        >>> my_list.append(2.5)
        >>> my_list.append(100.3)
        >>> my_list.print_sorted()
        [2.5, 50, 100.3]

Test: list with impossible numbers
        >>> my_list = MyList()
        >>> my_list.append(1e100)
        >>> my_list.append(10)
        >>> my_list.append(5j)
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        TypeError: unorderable types: complex() < int()

Test: list with 1e100
        >>> my_list = MyList()
        >>> my_list.append(1e100)
        >>> my_list.append(10)
        >>> my_list.append(5)
        >>> my_list.print_sorted()
        [5, 10, 1e+100]

Test: list with NaN
        >>> my_list = MyList()
        >>> my_list.append(float('NaN'))
        >>> my_list.append(10)
        >>> my_list.append(5)
        >>> my_list.print_sorted()
        [nan, 5, 10]

Test: list with inf
        >>> my_list = MyList()
        >>> my_list.append(float('inf'))
        >>> my_list.append(10)
        >>> my_list.append(5)
        >>> my_list.print_sorted()
        [5, 10, inf]

Test: list with NaN and inf
        >>> my_list = MyList()
        >>> my_list.append(float('NaN'))
        >>> my_list.append(10)
        >>> my_list.append(float('inf'))
        >>> my_list.print_sorted()
        [nan, 10, inf]

Test: list with list and ints
        >>> my_list = MyList()
        >>> my_list.append([1, 2])
        >>> my_list.append(10)
        >>> my_list.append(100)
        >>> my_list.print_sorted()
        Traceback (most recent call last):
        ...
        TypeError: unorderable types: int() < list()
